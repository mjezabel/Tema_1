# EJERCICIOS TEMA 1
## Ejercicio 1: Extracción de información de una receta
"""Al extraer texto de un sitio web de recetas, obtuviste una cadena de texto corrupta y al revés. Parece contener el nombre de una receta y la cantidad de calorías. Formatea la cadena para conseguir una estructura como la siguiente:
La receta de [Nombre de la receta] contiene [Número] calorías. 
Ayuda: Para voltear una cadena rápidamente utilizando slicing: cadena[::-1]"""

#Guardamos la receta en una variable tipo string.
receta = ".sairolac 037 eneitnoc siteugapse ed atecer aL"
#Hacemos slicing. El primer : indica que seleccionamos todos los caracteres de la cadena,
#y el segundo : seguido del -1 indica que recorremos los caracteres seleccionados desde el final hasta el principio.
receta[::-1]

## Ejercicio 2: Cálculo de interés compuesto
"""Crea un programa que calcule el interés compuesto.
Guarda en una variable capital_inicial el valor 1000.
Lee por pantalla la tasa de interés anual, que deberá estar entre 1% y 10%.
Eleva la tasa de interés a sí misma por el número de años (por ejemplo, 5 años).
Multiplica el capital_inicial por el resultado anterior en sí mismo.
Muestra el capital final."""

#Guardamos el capital inicial indicado en el enunciado en una variable tipo entero.
capital_inicial = 1000
#Pedimos la tasa de interés anual y la guardamos en una variable, haciendo primero un cast a tipo float (puesto que el comando input es tipo string por defecto).
tasa_interes_anual = float(input('Introduce la tasa de interés anual, que deberá estar entre 1% y 10%.'))
#Antes de realizar la operación matemática que nos devuelve el capital final, debemos comprobar que la tasa de interés #introducida está entre el 1% y el 10%. Si no es así, imprimimos un mensaje.
if 0.01 <= tasa_interes_anual <= 0.1:
    print(capital_inicial + capital_inicial*(tasa_interes_anual**5))
else:
    print('La tasa de interés anual no está entre los valores especificados.')

# Ejercicio 3: Encontrar palabras comunes
"""Dadas dos listas de palabras, genera una tercera lista con todas las palabras que se repitan en ambas listas, sin repetición en la nueva lista."""

lista_1 = ["María", "Pedro", "Juan", "Teresa", "Marcos"]
lista_2 = ["Alicia", "Juan", "Silvia", "Marcos"]
#La intersección (&) únicamente se puede hacer en conjuntos, por ello convertimos nuestras listas en conjuntos y,
#más tarde, volvemos a convertir el resultado en una lista.
set_1 = set(lista_1)
set_2 = set(lista_2)
set_3 = set_1 & set_2
print(list(set_3))

# Ejercicio 4: Priorización de tareas en un videojuego
"""Durante la planificación de un videojuego, se han acordado una serie de misiones con niveles de dificultad. Crea una estructura de cola con todas las misiones ordenadas por dificultad pero sin mostrar los números de dificultad."""

misiones = [('abrir_caja_fuerte', 5), ('insertar_id', 1), ('ordenar_archivos', 2)]

#Como queremos ordenar las misiones por su nivel de dificultad, necesitamos especificar en el método sort el criterio por el que nos vamos a regir.
# En los valores x a ordenar (cada una de las misiones), se debe considerar el segundo elemento (la dificultad de las misiones), que se
# expresa como x[1].
misiones.sort(key=lambda x:x[1])

#Para mostrar únicamente el nombre de las misiones, inicializamos un contador i = 0 y creamos una lista vacía a la que iremos añadiendo las misiones en orden.
i = 0
misiones_ordenadas = []
#Mientras el contador i sea menor o igual al número total de misiones:
while i < len(misiones):
    #Añadimos el nombre de la misión
    misiones_ordenadas.append(misiones[i][0])
    #Actualizamos el contador para evitar un bucle infinito.
    i +=1
print(misiones_ordenadas)

# Ejercicio 5: Descomposición de dirección IP
"""Crea un script que tome una dirección IP como argumento y la descomponga en sus cuatro octetos,
mostrándolos línea a línea."""

def separar(ip):
    #Separamos los octetos de la IP con el método split, utilizando el punto como separador.
    octetos = ip.split(".")
    
    #Si no hay cuatro octetos, salta un error.
    if len(octetos) != 4:
        raise ValueError('La dirección IP introducida es incorrecta; no está compuesta por 4 octetos.')
    
    for octeto in octetos:
        #Si los octetos no están compuestos por números, salta un error.
        try:
            octeto_int = int(octeto)
        except Exception as e:
            raise ValueError('La dirección IP introducida es incorrecta; alguno de los octetos contiene valores no numéricos.')
        
        #Si alguno de los octetos no está entre 0 y 255, salta un error.
        if not (0 <= octeto_int <= 255):
            raise ValueError ('La dirección IP introducida es incorrecta; alguno de los octetos no está entre 0 y 255.')

    #Si la dirección IP introducida es correcta, se imprime cada uno de los octetos en una línea.
    for octeto in octetos:
        print(f'{octeto}\n')

#Caso 1: la dirección IP introducida es correcta.
ejemplo_1 = '123.145.232.012'
separar(ejemplo_1)

#Caso 2: la dirección contiene letras.
ejemplo_2 = '123.uio.145.232'
try:
    separar(ejemplo_2)
except Exception as e:
    print(e)

#Caso 3: la dirección no tiene 4 octetos.
ejemplo_3 = '123.145.232'
try:
    separar(ejemplo_3)
except Exception as e:
    print(e)

#Caso 4: alguno de los octetos no está entre 0 y 255.
ejemplo_4 = '123.456.789.012'
try:
    separar(ejemplo_4)
except Exception as e:
    print(e)

# Ejercicio 6: Separar personajes de videojuegos
"""Crea una función que tome una lista de personajes de videojuegos y devuelva dos listas ordenadas: la primera con personajes humanos y la segunda con personajes no humanos."""

#Para un diccionario de personajes en los que la clave es el nombre y el valor puede ser "humano" o "no humano":
def separar(lista):
    #Creamos dos listas vacías a las que iremos agregando los nombres de los personajes según sean humanos o no.
    humanos = []
    no_humanos = []
    #Recorremos las claves y los valores del diccionario.
    for nombre, tipo in lista.items():
        #Si el valor es "humano", se añade el nombre del personaje (la clave) a la lista "humanos".
        if tipo == "humano":
            humanos.append(nombre)
        #En caso contrario, se añade a la lista "no humanos".
        #Utilizamos else en vez de if tipo == "no humano" por si el valor fuera distinto (por ejemplo, "pokemon") y así evitar errores.
        else:
            no_humanos.append(nombre)
    #Devolvemos las dos listas
    return humanos, no_humanos

#Probamos la función.
personajes = {"Ash": "humano", "Pikachu": "pokemon", "Meowth": "pokemon", "Brock": "humano", "James": "humano"}
print(separar(personajes))

# Ejercicio 7: Añadir ítem a un inventario
"""Crea una función llamada agregar_item(inventario, item) que reciba una lista de ítems de un inventario y un nuevo ítem a añadir. La función debe añadir el nuevo ítem siempre y cuando no se repita. Si el ítem ya está en el inventario, debe lanzar un error de tipo ValueError."""

def agregar_item(inventario, item):
    #Si el nuevo item no está en la lista, se añade.
    if item not in inventario:
        inventario.append(item)
        return inventario
    #Si el item ya está en el inventario, lanza un error tipo ValueError.
    else:
        raise ValueError('El nuevo item ya está en el inventario.')

#Caso 1: el nuevo item no está en la lista.
almacen = ["tornillos", "brocas", "destornillador"]
agregar_item(almacen, "martillo")

#Caso 2: el item ya está en la lista.
try:
    agregar_item(almacen, "brocas")
except Exception as e:
    print(e)
